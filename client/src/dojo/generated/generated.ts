/* Autogenerated file. Do not edit manually. */

import { Account, AccountInterface, cairo, CallData } from 'starknet'
import { DojoProvider } from '@dojoengine/core'
import { Direction } from '../../utils'

export type IWorld = Awaited<ReturnType<typeof setupWorld>>

export interface MoveProps {
  account: Account | AccountInterface
  direction: Direction
}

export async function setupWorld(provider: DojoProvider) {
  function actions() {
    const contract_name = 'actions'

    const create_initial_game_id = async (account: AccountInterface) => {
      try {
        return await provider.execute(
          account,
          contract_name,
          'create_initial_game_id',
          [],
        )
      } catch (error) {
        console.error('Error executing create_initial_game_id:', error)
        throw error
      }
    }

    const create_game = async (account: AccountInterface) => {
      try {
        return await provider.execute(account, contract_name, 'create_game', [])
      } catch (error) {
        console.error('Error executing create_game:', error)
        throw error
      }
    }

    const create_private_game = async (
      account: AccountInterface,
      player_2: string,
    ) => {
      try {
        return await provider.execute(
          account,
          contract_name,
          'create_private_game',
          [player_2],
        )
      } catch (error) {
        console.error('Error executing create_private_game:', error)
        throw error
      }
    }

    const spawn = async ({ account }: { account: AccountInterface }) => {
      try {
        return await provider.execute(account, contract_name, 'spawn', [])
      } catch (error) {
        console.error('Error executing spawn:', error)
        throw error
      }
    }

    const move = async ({ account, direction }: MoveProps) => {
      try {
        return await provider.execute(account, contract_name, 'move', [
          direction,
        ])
      } catch (error) {
        console.error('Error executing move:', error)
        throw error
      }
    }
    return {
      spawn,
      move,
      create_initial_game_id,
      create_game,
      create_private_game,
    }
  }
  return {
    actions: actions(),
  }
}

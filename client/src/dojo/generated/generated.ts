/* Autogenerated file. Do not edit manually. */

import { AccountInterface } from 'starknet'
import { DojoProvider } from '@dojoengine/core'

export type IWorld = Awaited<ReturnType<typeof setupWorld>>

export async function setupWorld(provider: DojoProvider) {
  function actions() {
    const create_initial_game_id = async (account: AccountInterface) => {
      try {
        return await provider.execute(account, {
          contractName: 'actions',
          entrypoint: 'create_initial_game_id',
          calldata: [],
        })
      } catch (error) {
        console.error('Error executing create_initial_game_id:', error)
        throw error
      }
    }

    const create_game = async (account: AccountInterface) => {
      try {
        return await provider.execute(account, {
          contractName: 'actions',
          entrypoint: 'create_game',
          calldata: [],
        })
      } catch (error) {
        console.error('Error executing create_game:', error)
        throw error
      }
    }

    const create_private_game = async (
      account: AccountInterface,
      player_2: string,
    ) => {
      try {
        return await provider.execute(account, {
          contractName: 'actions',
          entrypoint: 'create_private_game',
          calldata: [player_2],
        })
      } catch (error) {
        console.error('Error executing create_private_game:', error)
        throw error
      }
    }

    const join_game = async (
      account: AccountInterface,
      game_id: string,
      player_2_address: string,
    ) => {
      try {
        return await provider.execute(account, {
          contractName: 'actions',
          entrypoint: 'join_game',
          calldata: [game_id, player_2_address],
        })
      } catch (error) {
        console.error('Error executing join_game:', error)
        throw error
      }
    }

    const move = async (
      account: AccountInterface,
      game_id: string,
      selected_pit: number,
    ) => {
      try {
        return await provider.execute(account, {
          contractName: 'actions',
          entrypoint: 'move',
          calldata: [game_id, selected_pit],
        })
      } catch (error) {
        console.error('Error executing move:', error)
        throw error
      }
    }

    const spawn = async ({ account }: { account: AccountInterface }) => {
      try {
        return await provider.execute(account, {
          contractName: 'actions',
          entrypoint: 'spawn',
          calldata: [],
        })
      } catch (error) {
        console.error('Error executing spawn:', error)
        throw error
      }
    }

    return {
      spawn,
      create_initial_game_id,
      create_game,
      create_private_game,
      join_game,
      move,
    }
  }
  return {
    actions: actions(),
  }
}
